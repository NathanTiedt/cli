#!/usr/bin/env bash

# queries for data
sshQuery=Reservations[*].Instances[*].[PrivateIpAddress]

# filters for environments
#devFilter=Name=tag:Env,Values=development
#prodFilter=Name=tag:Env,Values=production
#stageFilter=Name=tag:Env,Values=staging

#filters for specific tier
#riskApiFilter=Name=tag:Tier,Values=RZRiskAPI
#appFilter=Name=tag:Tier,Values=App
#geoserverFilter=Name=tag:Tier,Values=Geoserver
#webFilter=Name=tag:Tier,Values=Web
#talusFilter=Name=tag:Tier,Values=Talus

declare -a envNames=("dev" "stage" "prod")
declare -a envs=("Name=tag:Env,Values=development" "Name=tag:Env,Values=staging" "Name=tag:Env,Values=production")
declare -a instances=("app" "geo" "web" "risk")
declare -a filters=("Name=tag:Tier,Values=App" "Name=tag:Tier,Values=Geoserver" "Name=tag:Tier,Values=Web" "Name=tag:Tier,Values=RZRiskAPI")

function seedEnv () {
  length=${#instances[@]}
  for (( i=0; i<${length}; i++ )); do
#    echo "$2.${instances[$i]}"
    aws ec2 describe-instances --filter "$1" "${filters[$i]}" --query "$sshQuery" --output text > ~/.ssh/tmp.txt
    lc=$( cat ~/.ssh/tmp.txt | wc -l )
    if [ $lc -eq 1 ]; then
      lc=""
    else
      lc=$((lc))
    fi
    while read addr; do
#      echo "$addr"
      echo "Host $2.${instances[$i]}$lc" >> ~/.ssh/config
      echo "    HostName $addr" >> ~/.ssh/config
      lc=$((lc-1))
    done < ~/.ssh/tmp.txt
  done
}

function seedIps () {
  envLength=${#envs[@]}
  for (( e=0; e<${envLength}; e++ )); do
    seedEnv ${envs[$e]} ${envNames[$e]}
  done
}

function removeOldIps () {
  touch ~/.ssh/config
  echo "# config file for aws ip addresses" > ~/.ssh/config
}

echo "Removing old ips"
removeOldIps
echo "Seeding new Ips"
seedIps
echo "Done Seeding Ips"

